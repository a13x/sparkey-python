typedef enum {
  SPARKEY_SUCCESS = 0,
  SPARKEY_INTERNAL_ERROR = -1,

  SPARKEY_FILE_NOT_FOUND = -100,
  SPARKEY_PERMISSION_DENIED = -101,
  SPARKEY_TOO_MANY_OPEN_FILES = -102,
  SPARKEY_FILE_TOO_LARGE = -103,
  SPARKEY_FILE_ALREADY_EXISTS = -104,
  SPARKEY_FILE_BUSY = -105,
  SPARKEY_FILE_IS_DIRECTORY = -106,
  SPARKEY_FILE_SIZE_EXCEEDED = -107,
  SPARKEY_FILE_CLOSED = -108,
  SPARKEY_OUT_OF_DISK = -109,
  SPARKEY_UNEXPECTED_EOF = -110,
  SPARKEY_MMAP_FAILED = -111,

  SPARKEY_WRONG_LOG_MAGIC_NUMBER = -200,
  SPARKEY_WRONG_LOG_MAJOR_VERSION = -201,
  SPARKEY_UNSUPPORTED_LOG_MINOR_VERSION = -202,
  SPARKEY_LOG_TOO_SMALL = -203,
  SPARKEY_LOG_CLOSED = -204,
  SPARKEY_LOG_ITERATOR_INACTIVE = -205,
  SPARKEY_LOG_ITERATOR_MISMATCH = -206,
  SPARKEY_LOG_ITERATOR_CLOSED = -207,
  SPARKEY_LOG_HEADER_CORRUPT = -208,
  SPARKEY_INVALID_COMPRESSION_BLOCK_SIZE = -209,
  SPARKEY_INVALID_COMPRESSION_TYPE = -210,

  SPARKEY_WRONG_HASH_MAGIC_NUMBER = -300,
  SPARKEY_WRONG_HASH_MAJOR_VERSION = -301,
  SPARKEY_UNSUPPORTED_HASH_MINOR_VERSION = -302,
  SPARKEY_HASH_TOO_SMALL = -303,
  SPARKEY_HASH_CLOSED = -304,
  SPARKEY_FILE_IDENTIFIER_MISMATCH = -305,
  SPARKEY_HASH_HEADER_CORRUPT = -306,
  SPARKEY_HASH_SIZE_INVALID = -307,

} sparkey_returncode;

const char * sparkey_errstring(sparkey_returncode code);

struct sparkey_logwriter;
typedef struct sparkey_logwriter sparkey_logwriter;

typedef enum {
  SPARKEY_COMPRESSION_NONE,
  SPARKEY_COMPRESSION_SNAPPY
} sparkey_compression_type;

typedef enum {
  SPARKEY_ENTRY_PUT,
  SPARKEY_ENTRY_DELETE
} sparkey_entry_type;

typedef enum {
  SPARKEY_ITER_NEW,
  SPARKEY_ITER_ACTIVE,
  SPARKEY_ITER_CLOSED,
  SPARKEY_ITER_INVALID
} sparkey_iter_state;

struct sparkey_logreader;
typedef struct sparkey_logreader sparkey_logreader;

struct sparkey_logiter;
typedef struct sparkey_logiter sparkey_logiter;

struct sparkey_hashreader;
typedef struct sparkey_hashreader sparkey_hashreader;

sparkey_returncode sparkey_logwriter_create(sparkey_logwriter **log, const char *filename, sparkey_compression_type compression_type, int compression_block_size);
sparkey_returncode sparkey_logwriter_append(sparkey_logwriter **log, const char *filename);
sparkey_returncode sparkey_logwriter_put(sparkey_logwriter *log, uint64_t keylen, const uint8_t *key, uint64_t valuelen, const uint8_t *value);
sparkey_returncode sparkey_logwriter_delete(sparkey_logwriter *log, uint64_t keylen, const uint8_t *key);
sparkey_returncode sparkey_logwriter_flush(sparkey_logwriter *log);
sparkey_returncode sparkey_logwriter_close(sparkey_logwriter **log);

/* logreader */

sparkey_returncode sparkey_logreader_open(sparkey_logreader **log, const char *filename);
void sparkey_logreader_close(sparkey_logreader **log);
uint64_t sparkey_logreader_maxkeylen(sparkey_logreader *log);
uint64_t sparkey_logreader_maxvaluelen(sparkey_logreader *log);
int sparkey_logreader_get_compression_blocksize(sparkey_logreader *log);
sparkey_compression_type sparkey_logreader_get_compression_type(sparkey_logreader *log);
sparkey_returncode sparkey_logiter_create(sparkey_logiter **iter, sparkey_logreader *log);
void sparkey_logiter_close(sparkey_logiter **iter);
sparkey_returncode sparkey_logiter_seek(sparkey_logiter *iter, sparkey_logreader *log, uint64_t position);
sparkey_returncode sparkey_logiter_skip(sparkey_logiter *iter, sparkey_logreader *log, int count);
sparkey_returncode sparkey_logiter_next(sparkey_logiter *iter, sparkey_logreader *log);
sparkey_returncode sparkey_logiter_reset(sparkey_logiter *iter, sparkey_logreader *log);
sparkey_returncode sparkey_logiter_keychunk(sparkey_logiter *iter, sparkey_logreader *log, uint64_t maxlen, uint8_t ** res, uint64_t *len);
sparkey_returncode sparkey_logiter_valuechunk(sparkey_logiter *iter, sparkey_logreader *log, uint64_t maxlen, uint8_t ** res, uint64_t *len);
sparkey_returncode sparkey_logiter_fill_key(sparkey_logiter *iter, sparkey_logreader *log, uint64_t maxlen, uint8_t *buf, uint64_t *len);
sparkey_returncode sparkey_logiter_fill_value(sparkey_logiter *iter, sparkey_logreader *log, uint64_t maxlen, uint8_t *buf, uint64_t *len);
sparkey_returncode sparkey_logiter_keycmp(sparkey_logiter *iter1, sparkey_logiter *iter2, sparkey_logreader *log, int *res);
sparkey_iter_state sparkey_logiter_state(sparkey_logiter *iter);
sparkey_entry_type sparkey_logiter_type(sparkey_logiter *iter);
uint64_t sparkey_logiter_keylen(sparkey_logiter *iter);
uint64_t sparkey_logiter_valuelen(sparkey_logiter *iter);

/* hashwriter */
sparkey_returncode sparkey_hash_write(const char *hash_filename, const char *log_filename, int hash_size);

/* hashreader */
sparkey_returncode sparkey_hash_open(sparkey_hashreader **reader, const char *hash_filename, const char *log_filename);
sparkey_logreader * sparkey_hash_getreader(sparkey_hashreader *reader);
void sparkey_hash_close(sparkey_hashreader **reader);
sparkey_returncode sparkey_hash_get(sparkey_hashreader *reader, const uint8_t *key, uint64_t keylen, sparkey_logiter *iter);
sparkey_returncode sparkey_logiter_hashnext(sparkey_logiter *iter, sparkey_hashreader *reader);
uint64_t sparkey_hash_numentries(sparkey_hashreader *reader);
uint64_t sparkey_hash_numcollisions(sparkey_hashreader *reader);

/* util */

char * sparkey_create_log_filename(const char *index_filename);
char * sparkey_create_index_filename(const char *log_filename);
